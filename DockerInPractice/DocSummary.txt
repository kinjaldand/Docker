■ Docker takes a logistical approach to solving common software problems and
simplifies your experience with installing, running, publishing, and removing
software. It’s a command-line program, a background daemon, and a set of
remote services. It’s integrated with community tools provided by Docker Inc.
■ The container abstraction is at the core of its logistical approach.
■ Working with containers instead of software creates a consistent interface and
enables the development of more sophisticated tools.
■ Containers help keep your computers tidy because software inside containers
can’t interact with anything outside those containers, and no shared dependencies
can be formed.
■ Because Docker is available and supported on Linux, OS X, and Windows, most
software packaged in Docker images can be used on any computer.
■ Docker doesn’t provide container technology; it hides the complexity of working
directly with the container software.

■ Containers can be run with virtual terminals attached to the user’s shell or in
detached mode.
■ By default, every Docker container has its own PID namespace, isolating process
information for each container.
■ Docker identifies every container by its generated container ID, abbreviated
container ID, or its human-friendly name.
■ All containers are in any one of four distinct states: running, paused, restarting,
or exited.
■ The docker exec command can be used to run additional processes inside a
running container.
■ A user can pass input or provide additional configuration to a process in a
container by specifying environment variables at container-creation time.
■ Using the --read-only flag at container-creation time will mount the container
file system as read-only and prevent specialization of the container.
■ A container restart policy, set with the --restart flag at container-creation
time, will help your systems automatically recover in the event of a failure.
■ Docker makes cleaning up containers with the docker rm command as simple
as creating them.

